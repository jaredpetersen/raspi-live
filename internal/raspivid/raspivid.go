package raspivid

import (
	"io"
	"os/exec"
	"strconv"
)

// Strm represents the video stream generated by raspivid.
type Strm struct {
	Video io.ReadCloser
	cmd   *exec.Cmd
}

// Options represents the options that may be applied to the video coming from raspivid.
type Options struct {
	Width          int
	Height         int
	Fps            int
	HorizontalFlip bool
	VerticalFlip   bool
}

// Stream prepares to start a video stream from raspivid using the Raspberry Pi camera module.
//
// Relies on the defaults of raspivid if an option value is not provided.
func Stream(options Options) *Strm {
	var args []string

	if options.Width != 0 {
		args = append(args, "--width", strconv.Itoa(options.Width))
	}

	if options.Height != 0 {
		args = append(args, "--height", strconv.Itoa(options.Height))
	}

	if options.Fps != 0 {
		args = append(args, "--framerate", strconv.Itoa(options.Fps))
	}

	if options.HorizontalFlip {
		args = append(args, "--hflip")
	}

	if options.VerticalFlip {
		args = append(args, "--vflip")
	}

	raspivid := exec.Command("raspivid", args...)
	raspividVideo, _ := raspivid.StdoutPipe()

	return &Strm{
		Video: raspividVideo,
		cmd:   raspivid,
	}
}

// Start starts the video stream.
//
// If Start returns successfully, strm.Video will have a video stream.
func (strm *Strm) Start() {
	strm.cmd.Start()
}

// Wait waits for the video stream to complete.
//
// The stream operation must have been started by Start.
func (strm *Strm) Wait() {
	strm.cmd.Wait()
}
